{"version":3,"sources":["GameLogic.js","App.js","reportWebVitals.js","index.js"],"names":["generateSecret","digits","result","length","index","Math","floor","random","splice","App","displaySecret","useState","guesses","setGuesses","secret","setSecret","lives","setLives","message","setMessage","setResult","input","setInput","game","setGame","submitGuess","isValid","guess","includes","status","unique","Set","split","isNaN","validGuess","compare","bull","cow","i","code","console","log","compareGuess","prev","rows","oldGuess","push","className","id","onChange","target","value","onKeyDown","event","key","substring","tpye","onClick","type","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1bb90776.chunk.js","sourcesContent":["// Returns a string of 4 unique digits\r\nexport function generateSecret() {\r\n    let digits = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n    let result = \"\";\r\n    while (result.length !== 4) {\r\n        let index = Math.floor(Math.random() * digits.length);\r\n        result += digits[index];\r\n        digits.splice(index, 1);\r\n    }\r\n    return result\r\n}\r\n\r\n/* \r\n    A guess is valid if all 4 digits in {guess} are unique, and the combination is not repeated in {guesses}\r\n        {guesses} - String[], previous guesses.\r\n        {guess}   - String, new guess\r\n*/\r\nexport function validGuess(guesses, guess) {\r\n    if (guesses.includes(guess)) {\r\n        return { status: -1, message: \"Invalid: Require New Guess\" };\r\n    }\r\n    const unique = [...new Set(guess.split(''))];\r\n    if (4 < guess.length || unique.length < 4) {\r\n        return { status: -1, message: \"Invalid: Require 4 Unique Digits\" }\r\n    }\r\n    else if(isNaN(guess)) {\r\n        return {status : -1, message: \"Invalid: Require Only Numbers\"};\r\n    }\r\n    else if(guess.includes(\"0\")) {\r\n        return {status : -1, message: \"Invalid: Require 1 - 9, [0]\"};\r\n    }\r\n    return { status: 0, message: \"Guess Processed\" };\r\n}\r\n\r\n\r\n/*\r\n    Compare the guess string with the secret string and returns the #A#B results\r\n    {guess}  - String, new guess\r\n    {secret} - String, the Secrete \r\n*/\r\nexport function compareGuess(guess, secret) {\r\n    let bull = 0;\r\n    let cow = 0;\r\n    for (let i = 0; i < guess.length; i++) {\r\n        if (guess[i] === secret[i]) {\r\n            bull++;\r\n        } else if (secret.includes(guess[i])) {\r\n            cow++;\r\n        }\r\n    }\r\n    let code = (bull === 4) ? 0 : -1;\r\n    console.log(code);\r\n    return { status: code, message: `${bull}A${cow}B` };\r\n}\r\n\r\n","import './App.css';\n\n// My import\nimport { useState } from 'react';\nimport { generateSecret, validGuess, compareGuess } from './GameLogic';\n\nfunction App() {\n  // User guesses\n  const [guesses, setGuesses] = useState([]);\n  // Secret key: \n  // Initial State: 4 random unique digits \n  const [secret, setSecret] = useState(generateSecret());\n  // Lives\n  const [lives, setLives] = useState(8);\n  // Message\n  const [message, setMessage] = useState(\"Enter 4 Digits!\");\n  // Results\n  const [result, setResult] = useState([]);\n  // User input\n  const [input, setInput] = useState('');\n  // Game State\n  const [game, setGame] = useState(true);\n\n\n  /*\n    Process a guess\n  */\n  const submitGuess = () => {\n    const isValid = validGuess(guesses, input);\n    // Set the message\n    setMessage(isValid.message);\n    if (isValid.status === 0) {\n      // append to guess list\n      setGuesses([...guesses, input]);\n      // append to result list\n      const compare = compareGuess(input, secret);\n      setResult([...result, compare.message]);\n      if (compare.status === -1) {\n        setLives(prev => prev - 1);\n        if (lives - 1 === 0) {\n          setGame(false);\n          setMessage(\"Lost The Game!\")\n        }\n      }\n      else {\n        setGame(false);\n        setMessage(\"Won The Game!\");\n      }\n      // clear the input \n      setInput(\"\");\n    }\n  }\n\n  /* onChange handler for the text-input element, set the state {input} to text-input's value, \n     if the state {input}'s length is less than or equal to 4.\n  */\n  const handleOnChange = ({ target }) => {\n    if (target.value.length <= 4 && game) {\n      setInput(target.value);\n    }\n  }\n\n  /* onKeyDown handler for the text-input element\n     if \"Enter\" is pressed, then the guess of the user will be processed\n     if \"BackSpace\" is pressed, then we remove the last character of the state {input}\n  */\n  const handleKeyDown = (event) => {\n    if (game) {\n      if (event.key === \"Enter\") {\n        submitGuess();\n      }\n      else if (event.key === \"Backspace\") {\n        setInput(input.substring(0, input.length));\n      }\n    }\n  }\n\n  /* onClick hanlder for the button-input element\n     if this element is clicked, then the guess of the user will be processed\n  */\n  const handleClickGuess = () => {\n    if (game) {\n      submitGuess();\n    }\n  }\n\n\n  /* onClick hanlder for the button-input element\n     if this element is clicked, then the game will be resetted\n  */\n  const handleClickReset = () => {\n    setSecret(generateSecret());\n    setGuesses([]);\n    setLives(8);\n    setMessage(\"New Game!\");\n    setResult([]);\n    setInput(\"\");\n    setGame(true);\n  }\n\n\n  // Render()\n  let displaySecret;\n  if (!game) {\n    displaySecret = `The Secret: ${secret}`;\n  }\n  let rows = [];\n  for (let i = 0; i < guesses.length; i++) {\n    let oldGuess = <td>{guesses[i]}</td>;\n    let message = <td>{result[i]}</td>;\n    rows.push(<tr>{[oldGuess, message]}</tr>);\n  }\n  return (\n    <div className=\"App\">\n      <h1>4 Digits</h1>\n      <h4>{message}</h4>\n      <h5>Lives:{lives}</h5>\n      <input id=\"input\" onChange={handleOnChange} onKeyDown={handleKeyDown} value={input} tpye=\"text\" />\n      <input onClick={handleClickGuess} type=\"button\" value=\"Guess!\" />\n      <input onClick={handleClickReset} className=\"button button-clear\" type=\"button\" value=\"Reset\" />\n      <table>\n        <thead>\n          <tr>\n            <td>Guess</td>\n            <td>Result</td>\n          </tr>\n        </thead>\n        <tbody>\n          {rows}\n        </tbody>\n      </table>\n      <h2>{displaySecret}</h2>\n      <p>Note: If the matching digits are in their right positions, they are \"bulls\", if in different positions, they are \"cows\".</p>\n    </div>);\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}